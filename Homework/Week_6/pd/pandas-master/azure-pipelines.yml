# Adapted from https://github.com/numba/numba/blob/master/azure-pipelines.yml
jobs:
# Mac and Linux could potentially use the same template
# except it isn't clear how to use a different build matrix
# for each, so for now they are separate
- template: ci/azure/macos.yml
  parameters:
    name: macOS
    vmImage: xcode9-macos10.13
- template: ci/azure/linux.yml
  parameters:
    name: Linux
    vmImage: ubuntu-16.04

# Windows Python 2.7 needs VC 9.0 installed, and not sure
# how to make that a conditional task, so for now these are
# separate templates as well
- template: ci/azure/windows.yml
  parameters:
    name: Windows
    vmImage: vs2017-win2016
- template: ci/azure/windows-py27.yml
  parameters:
    name: WindowsPy27
    vmImage: vs2017-win2016

- job: 'Checks_and_doc'
  pool:
    vmImage: ubuntu-16.04
  timeoutInMinutes: 90
  steps:
  - script: |
      # XXX next command should avoid redefining the path in every step, but
      # made the process crash as it couldn't find deactivate
      #echo '##vso[task.prependpath]$HOME/miniconda3/bin'
      echo '##vso[task.setvariable variable=CONDA_ENV]pandas-dev'
      echo '##vso[task.setvariable variable=ENV_FILE]environment.yml'
      echo '##vso[task.setvariable variable=AZURE]true'
    displayName: 'Setting environment variables'

  # Do not require a conda environment
  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      ci/code_checks.sh patterns
    displayName: 'Looking for unwanted patterns'
    condition: true

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      sudo apt-get install -y libc6-dev-i386
      ci/incremental/install_miniconda.sh
      ci/incremental/setup_conda_environment.sh
    displayName: 'Set up environment'

  # Do not require pandas
  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate pandas-dev
      ci/code_checks.sh lint
    displayName: 'Linting'
    condition: true

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate pandas-dev
      ci/code_checks.sh dependencies
    displayName: 'Dependencies consistency'
    condition: true

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate pandas-dev
      ci/incremental/build.sh
    displayName: 'Build'
    condition: true

  # Require pandas
  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate pandas-dev
      ci/code_checks.sh code
    displayName: 'Checks on imported code'
    condition: true

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate pandas-dev
      ci/code_checks.sh doctests
    displayName: 'Running doctests'
    condition: true

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate pandas-dev
      ci/code_checks.sh docstrings
    displayName: 'Docstring validation'
    condition: true

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate pandas-dev
      pytest --capture=no --strict scripts
    displayName: 'Testing docstring validaton script'
    condition: true

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate pandas-dev
      git remote add upstream https://github.com/pandas-dev/pandas.git
      git fetch upstream
      if git diff upstream/master --name-only | grep -q "^asv_bench/"; then
          cd asv_bench
          asv machine --yes
          ASV_OUTPUT="$(asv dev)"
          if [[ $(echo "$ASV_OUTPUT" | grep "failed") ]]; then
              echo "##vso[task.logissue type=error]Benchmarks run with errors"
              echo "$ASV_OUTPUT"
              exit 1
          else
              echo "Benchmarks run without errors"
          fi
      else
          echo "Benchmarks did not run, no changes detected"
      fi
    displayName: 'Running benchmarks'
    condition: true
